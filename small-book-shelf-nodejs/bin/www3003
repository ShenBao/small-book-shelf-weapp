#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const appToken = require('../app-token');
const debug = require('debug')('server:server');
const http = require('http');

/**
 * 业务服务端口,默认为3003
 */
const port = normalizePort(process.env.PORT || '3003');
/**
 * 中控服务端口,默认为3309
 */
const tokenPort = normalizePort(process.env.TOKEN_PORT || '3309');
app.set('port', port);
appToken.set('port', tokenPort);

/**
 * 创建 HTTP & access_token 服务器
 */
const server = http.createServer(app);
const tokenServer = http.createServer(appToken);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', function () { onListening(server) });

tokenServer.listen(tokenPort);
tokenServer.on('error', onError);
tokenServer.on('listening', function () { onListening(tokenServer) });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(serverObj) {
  const addr = serverObj.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('listening on ' + bind);
}